import java.awt.*;

import javax.swing.*;
import javax.swing.border.*;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;

import java.awt.event.*;
import java.util.Random;

/**************************
 * 
 * @author Ryan Szymkiewicz
 *  written for CS 342, Spring 2014
 *  
 *  The purpose of this file is to provide the GUI for our networked
 *  chat application.  There are options for both a server and client GUI
 *  that can be selected when the program is started.
 *
 */
@SuppressWarnings("serial")
public class chatGUI extends JFrame implements ActionListener{
	
	//these class variables will be used throughout the file.
	//they will be described as they are used
	private JButton serverButton, clientButton;
	private JLabel welcomeLabel;
	private JPanel firstPanel, clientPanel;
	private JLabel connectLabel,chatLabel;
	private JButton clientConnect, clientDisconnect, clientExit;
	private JPanel clientButtonPanel;
	private JPanel clientConnects;
	private JTextArea clientChatWindow;
	private JPanel clientContainer;
	private JTextArea clientMessageArea;
	private JButton clientMultipleMessages;
	private JButton serverConnect;
	private JPanel serverPanel;
	private JTextField portTextField;
	private int serverPort;
	private JPanel serverInfoPanel;
	private JScrollPane chatScrollPane;
	private JPanel textContainer;
	private JButton clientSend;
	private String userName=null;
	
	
	
	
	/*******************
	 * The chatGUI method is used when starting the program.  
	 * It allows the user to select if they are a client or server
	 */
	public chatGUI(){
		
		//set title of window
		super("Chat Client");
		setSize(200,100);//set initial window size
		
		firstPanel = new JPanel();//create the first panel
		
		//ask if the user is a server or client
		firstPanel.setLayout(new FlowLayout());
		welcomeLabel = new JLabel("Are you a server or client? ");
		serverButton = new JButton("Server");
		serverButton.addActionListener(this);
		clientButton = new JButton("Client");
		clientButton.addActionListener(this);
		
		
		firstPanel.add(welcomeLabel);
		firstPanel.add(serverButton);
		firstPanel.add(clientButton);
		
		add(firstPanel);//add the panel
		
		setVisible(true);
	}
	
	/*******************
	 * The setServerGUI method is used if the user indicates that they are a 
	 * server.  This allows the user to "select" a port and displays that
	 * information
	 */
	private void setServerGUI(){
		
		remove(firstPanel);//remove the first panel
		
		setSize(300,200);//set a new size
		
		//initialize the new panel
		serverPanel = new JPanel(new GridLayout(3,1));
		add(serverPanel);
		
		JLabel serverWelcome = new JLabel("Enter the port you will connect to");
		serverPanel.add(serverWelcome,SwingConstants.CENTER);
		
		//show the port being connected to.  currently set to 0(default)
		portTextField = new JTextField();
		portTextField.setEditable(false);
		portTextField.setText("0");
		serverPanel.add(portTextField);
		
		//connect button....this will bring up a new screen if clicked
		serverConnect = new JButton("Connect");
		serverConnect.addActionListener(this);
		serverPanel.add(serverConnect);
		
		
		
		revalidate();//change the window
		
		
		
		
	}
	
	
	/***************************
	 * The setUsername method sets the username for a client based
	 * on what they have entered or generates a random username if 
	 * they do not select one
	 */
	private void setUsername(){
		
		
		//initilize the labels and panel,  add the items
		JLabel nameLabel = new JLabel("Enter your username");
		JTextField nameEnter = new JTextField();
		JPanel namePanel = new JPanel(new GridLayout(2,1));
		namePanel.add(nameLabel);
		namePanel.add(nameEnter);
		
		
		
		//use JOptionPane to get the username with an "OK-Cancel" popup
		int option =
				JOptionPane.showConfirmDialog(
						null,
						namePanel,
						"Enter your username",
						JOptionPane.OK_CANCEL_OPTION);
		
		String tUserName = nameEnter.getText();//temporarily set the username
		
		if(option == JOptionPane.OK_OPTION && !tUserName.isEmpty()){
			
			userName = tUserName;//if user pressed OK and field is valid,  set name
			
			System.out.print(userName);
			
		}
		
		//if the user pressed cancel or did not enter a name,
		//generate a random username
		else if(option == JOptionPane.CANCEL_OPTION || tUserName.isEmpty()){
			
			int num1,num2,num3;
			
			//three random integers from 0-99 are obtained.
			//There is an extremely small chance that two users could
			//have the same name,  but since this chat should not use more than
			//~5 clients,  the risk is very low.
			Random generator = new Random();
			num1 = generator.nextInt(99);
			num2 = generator.nextInt(99);
			num3 = generator.nextInt(99);
			
			//set the username with User followed by the 3 numbers
			userName = "User"+
					Integer.toString(num1)+
					Integer.toString(num2)+
					Integer.toString(num3);
			
			System.out.println(userName);
		}
		
		
		
	}
	
	
	/**********************
	 * setCLientGUI sets up and displays the GUI for a client
	 * The functionality will be described below
	 */
	private void setClientGUI(){
		
		
		
		remove(firstPanel);//remove first panel
		
		setSize(1000,750);//set new size
		
		setUsername();//set username if client
		
		//clientPanel is a container for all other panels in this method
		clientPanel=new JPanel(new BorderLayout());
		add(clientPanel);
		
		//set up buttons that will line the top of the client panel
		//these buttons are set up with action listeners so that they
		//respond when clicked
		clientConnect = new JButton("Connect");
		clientConnect.addActionListener(this);
		clientDisconnect = new JButton("Disconnect");
		clientDisconnect.addActionListener(this);
		clientExit = new JButton("Exit");
		clientExit.addActionListener(this);
		clientMultipleMessages = new JButton("Private Message");
		clientMultipleMessages.addActionListener(this);
		
		//intialize and add a JPanel that contains the  buttons
		clientButtonPanel = new JPanel();
		clientButtonPanel.add(clientConnect);
		clientButtonPanel.add(clientDisconnect);
		clientButtonPanel.add(clientExit);
		clientButtonPanel.add(clientMultipleMessages);
		
		//add the panel to the top of the container panel
		clientPanel.add(clientButtonPanel, BorderLayout.NORTH);
		
		/*
		//clientContainer is another container JPanel
		//that will contain the chat connects and the chat window
		//GridBagLayout provides the most customization options
		clientContainer = new JPanel(new GridLayout(1,2));
		GridBagConstraints c = new GridBagConstraints();
		
		//set up JPanel that will show the clients currently connected.
		//Place this panel on the left side of the client window
		clientConnects = new JPanel();
		Border connectBorder = BorderFactory.createLineBorder(Color.black);
		clientConnects.setBorder(connectBorder);
		clientConnects.setBackground(Color.WHITE);
		c.gridx=0;
		c.gridy=1;
		c.weightx=0.1;
		c.ipady=600;
		c.ipadx=200;
		
		clientContainer.add(clientConnects);
		
		//label the panel
		connectLabel = new JLabel("Connections");
		c.gridx=0;
		c.gridy=0;
		c.ipady=0;
		c.ipadx=0;
		clientContainer.add(connectLabel);
		
		
		//set up a JTextArea that will function as the main chat window
		//a scroll bar has been added to keep track of longer conversations
		//This area will be on the middle-right side of the page
		//This text area cannot be edited
		chatScrollPane = new JScrollPane();
		clientChatWindow = new JTextArea(400,400);
		Border chatBorder = BorderFactory.createLineBorder(Color.black);
		
		clientChatWindow.setEditable(false);
		clientChatWindow.setBorder(chatBorder);
		clientChatWindow.setBackground(Color.WHITE);
		c.gridx=1;
		c.gridy=1;
		c.ipadx=700;
		c.ipady=600;
		chatScrollPane.add(clientChatWindow);
		clientContainer.add(chatScrollPane);
		
		chatLabel = new JLabel("Chat");
		c.gridx=1;
		c.gridy=0;
		c.ipadx=0;
		c.ipady=0;
		clientContainer.add(chatLabel);
		
		clientPanel.add(clientContainer);
		*/
		
		JPanel test1 = new JPanel(new BorderLayout());
		Border panelBorder = 
				BorderFactory.createEmptyBorder(30,30,30,30);
		test1.setBorder(panelBorder);
		
		JTextArea test2 = new JTextArea(5,55);
		
		JScrollPane scrollPane = new JScrollPane (test2);
		
        scrollPane.setVerticalScrollBarPolicy 
                          (ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS);
        scrollPane.setHorizontalScrollBarPolicy 
        				(ScrollPaneConstants.HORIZONTAL_SCROLLBAR_ALWAYS);
		Border textBorder = BorderFactory.createTitledBorder("Chat Window");
		scrollPane.setBorder(textBorder);
		test2.setText("Hi!");
		
		JPanel test3 = new JPanel();
		test3.setPreferredSize(new Dimension(200,100));
		test3.setBackground(Color.BLACK);
	
		
		test1.add(scrollPane,BorderLayout.EAST);
		test1.add(test3,BorderLayout.WEST);
		clientPanel.add(test1);
		
		textContainer = new JPanel(new BorderLayout());
		
		clientMessageArea = new JTextArea();
		Border messageBorder = BorderFactory.createLineBorder(Color.black);
		clientMessageArea.setBorder(messageBorder);
		clientMessageArea.setText("Type Here");
		
		textContainer.add(clientMessageArea,BorderLayout.CENTER);
		
		
		clientSend = new JButton("Send");
		clientSend.addActionListener(this);
		textContainer.add(clientSend,BorderLayout.EAST);
		
		clientPanel.add(textContainer,BorderLayout.SOUTH);
		
		
		
		
		revalidate();
		
	}
	
	public int getServerPort(){
		return serverPort;
	}
	
	public JPanel getConnectWindow(){
		return clientConnects;
	}
	
	public JTextArea getChatWindow(){
		return clientChatWindow;
	}
	
	public String getUsername(){
		return userName;
	}
	
	public void actionPerformed(ActionEvent e) {
		
		if(e.getSource() == serverButton){
			
			setServerGUI();
			
		}
		
		else if(e.getSource() == clientButton){
			
			setClientGUI();
			
		}
		
		else if(e.getSource() == serverConnect){
			String tempPort = portTextField.getText();
			serverPort = Integer.parseInt(tempPort);
			remove(serverPanel);
			serverInfoPanel = new JPanel();
			add(serverInfoPanel);
			JLabel info = new JLabel("You are connected to port: "+tempPort);
			serverInfoPanel.add(info);
			System.out.println(serverPort);
			revalidate();
		}
		
		else if(e.getSource() == clientExit){
			System.exit(0);
		}
		else if(e.getSource() == clientConnect){
			String port=(String)
					JOptionPane.showInputDialog("What port do you want to use?");
			System.out.println(port);
		}
		else if(e.getSource() == clientDisconnect){
			
		}
		
		else if(e.getSource() == clientSend){
			System.out.println(clientMessageArea.getText());
			clientChatWindow.append(clientMessageArea.getText());
			revalidate();
		}
		
		
		else if(e.getSource() == clientMultipleMessages){
			JTextField people = new JTextField(25);
			JTextField message = new JTextField(50);
			JLabel peopleLabel = new JLabel("Enter the people you wish to \n"
					+ "chat with separated with a space\n.");
			JLabel messageLabel = new JLabel("Enter your message \n");
			
			JPanel privateMessagePanel = new JPanel(new GridLayout(4,1));
			privateMessagePanel.add(peopleLabel);
			privateMessagePanel.add(people);
			
			privateMessagePanel.add(messageLabel);
			privateMessagePanel.add(message);
			
			int result =
					JOptionPane.showConfirmDialog(
							null,
							privateMessagePanel,
							"Enter your message and recipients",
							JOptionPane.OK_CANCEL_OPTION);
			if(result == JOptionPane.OK_OPTION){
				System.out.println(people.getText());
				System.out.println(message.getText());
			}
					
			
			
					
		}
		else{
			System.out.println("Problem with button press");
		}
		
	}

	
	
	
	
	
	
}